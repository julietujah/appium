name: Functional Tests

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        apiLevel: [32, 30, 28, 23]
        include:
          - apiLevel: 32
            emuTag: google_apis
            arch: x86_64
          - apiLevel: 30
            emuTag: google_apis
            arch: x86
          - apiLevel: 28
            emuTag: default
            arch: x86
          - apiLevel: 23
            emuTag: default
            arch: x86

    env:
      CI: true
      ANDROID_AVD: emulator
      APPIUM_TEST_SERVER_PORT: 4567
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      _FORCE_LOGS: 1
      TEST_PASS_THRESHOLD: 10

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
      - run: curl -sSL https://bit.ly/install-xq | sudo bash
      - run: |
          npm install mocha-multi-reporters --no-save
          npm install -g appium
          npm install --no-save mjpeg-consumer
        name: Install dev dependencies
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.apiLevel }}
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          avd-name: ${{ env.ANDROID_AVD }}
          force-avd-creation: false
          api-level: ${{ matrix.apiLevel }}
          disable-spellchecker: true
          target: ${{ matrix.emuTag }}
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          arch: ${{ matrix.arch }}
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."
      - run: |
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          appium driver install --source=local "$cwd"
          appium driver doctor uiautomator2
          nohup appium server \
            --port=$APPIUM_TEST_SERVER_PORT \
            --address=$APPIUM_TEST_SERVER_HOST \
            --relaxed-security \
            --log-no-colors \
            --log-timestamp \
            2>&1 > "$cwd/appium.log" &
          popd
        name: Start Appium server
      - name: Wait for Appium Server
        run: |
          timeout=30
          while ! nc -z $APPIUM_TEST_SERVER_HOST $APPIUM_TEST_SERVER_PORT; do   
            sleep 1
            ((timeout--))
            if [ $timeout -eq 0 ]; then
              echo "Appium server did not start in time"
              exit 1
            fi
          done
      - run: nohup adb logcat > logcat.log &
        name: Capture logcat
      - uses: reactivecircus/android-emulator-runner@v2
        name: e2e_api${{ matrix.apiLevel }}
        with:
          script: bash -xe scripts/run-functional-tests.sh
          avd-name: ${{ env.ANDROID_AVD }}
          force-avd-creation: false
          api-level: ${{ matrix.apiLevel }}
          disable-spellchecker: true
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          target: ${{ matrix.emuTag }}
          arch: ${{ matrix.arch }}
      - name: Save logcat output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: logcat-api${{ matrix.apiLevel }}
          path: logcat.log
      - name: Save server output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: appium-api${{ matrix.apiLevel }}
          path: appium.log
